@model CRE.ViewModels.AssignEvaluatorsViewModel

@{
    ViewData["Title"] = "Assign Evaluators";
}

<h2>Assign Evaluators</h2>

<div class="card border-light mb-3" style="width:contain">
    <div class="card-header">
        <div class="row">
            <div class="col text-start">
                <p id="urecNoText">
                    <strong>UREC No.: </strong> <span id="urecNoValue">@Model.EthicsApplication.urecNo</span>
                    <button type="button" class="btn btn-primary ms-2" onclick="copyUrecNo()">
                        Copy UREC No.
                    </button>
                </p>
            </div>
            <div class="col text-end">
                <p id="dtsNoText">
                    <strong>DTS No.:</strong>
                    @if (string.IsNullOrEmpty(Model.EthicsApplication.dtsNo))
                    {
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editDtsModal">Add DTS No.</button>
                    }
                    else
                    {
                        <span id="dtsNoValue">@Model.EthicsApplication.dtsNo</span>
                    }
                    @if (!string.IsNullOrEmpty(Model.EthicsApplication.dtsNo))
                    {
                        <button type="button" class="btn btn-primary ms-2" onclick="copyDtsNo()">
                            Copy DTS No.
                        </button>
                    }
                </p>
            </div>
        </div>
        <div class="row">
            <h4><strong>Research Title:</strong>@Model.NonFundedResearchInfo.title</h4>
            <div class="col">
                <strong>Proponent/s:</strong>
            </div>
            <div class="col">
                @($"{Model.User.fName} {Model.User.mName} {Model.User.lName}")
                <br />
                @if (Model.CoProponent != null && Model.CoProponent.Any())
                {
                    foreach (var proponent in Model.CoProponent)
                    {
                        @proponent.coProponentName <br />
                    }
                }
            </div>
        </div>
        <div class="row">
            <p><strong>Field of Study:</strong> @Model.EthicsApplication.fieldOfStudy</p>
            <p><strong>College: </strong> @Model.NonFundedResearchInfo.college</p>
            <p><strong>Branch/Campuses: </strong> @Model.NonFundedResearchInfo.campus</p>
            <p><strong>Review Type: </strong> @Model.EthicsApplication.InitialReview.ReviewType</p>
        </div>
    </div>
</div>
<div class="card-body">
    <h4>Application Forms</h4>
    <hr />
    <div class="row">
        <div class="col-sm">
            @if (Model.ReceiptInfo != null && Model.ReceiptInfo.scanReceipt != null)
            {
                <div class="mb-3">
                    <label><strong>Receipt:</strong></label>
                    <button class="btn btn-primary" onclick="openPdfInModal('@Url.Action("ViewReceipt", "ReceiptInfo", new { urecNo = Model.EthicsApplication?.urecNo })')">
                        View Receipt (PDF)
                    </button>
                </div>
            }

            @if (Model.EthicsApplicationForms != null && Model.EthicsApplicationForms.Any())
            {
                <ul class="list-unstyled">
                    @foreach (var form in Model.EthicsApplicationForms)
                    {
                        <li>
                            <button class="btn btn-primary" onclick="openPdfInModal('@Url.Action("ViewFile", "EthicsApplicationForms", new { formid = form.ethicsFormId, urecNo = Model.EthicsApplication.urecNo })')">
                                @form.fileName
                            </button>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No forms submitted.</p>
            }
        </div>
        <div class="col-sm">

            <div id="selectedEvaluators" class="mt-4">
                <h6>Selected Evaluators:</h6>
                <ul id="selectedEvaluatorsList"></ul>
            </div>
            <button type="button" id="assignButton" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#assignEvaluatorsModal">
                Assign Evaluators
            </button>

            <form id="evaluatorForm" asp-action="AssignEvaluators" method="post" class="mt-4">


                <input type="hidden" name="urecNo" value="@Model.EthicsApplication.urecNo" />
                <input type="hidden" id="reviewType" value="@Model.EthicsApplication.InitialReview.ReviewType" />

                <button type="submit" class="btn btn-success" id="submitButton" disabled>Submit Evaluators</button> <!-- Move the submit button here -->

                <div class="modal fade" id="assignEvaluatorsModal" tabindex="-1" aria-labelledby="assignEvaluatorsModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="assignEvaluatorsModalLabel">Assign Evaluators</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="container">
                                    <div id="warningMessage" class="alert alert-warning d-none" role="alert"></div> <!-- Warning message placeholder -->
                                    @if (Model.RecommendedEvaluators != null && Model.RecommendedEvaluators.Any())
                                    {
                                        <h6>Recommended Evaluators (Least Pending)</h6>
                                        <div class="row mb-4">
                                            @foreach (var evaluator in Model.RecommendedEvaluators
                                           .OrderBy(e => e.pendingEval)
                                           .Take(3))
                                            {
                                                <div class="col-md-4 mb-3">
                                                    <div class="form-check">
                                                        <input class="form-check-input evaluator-checkbox" type="checkbox"
                                                               name="selectedEvaluatorIds"
                                                               value="@evaluator.ethicsEvaluatorId"
                                                               data-name="@($"{evaluator.Faculty?.User?.fName} {evaluator.Faculty?.User?.lName}")" />
                                                        <label class="form-check-label">
                                                            @($"{evaluator.Faculty?.User?.fName} {evaluator.Faculty?.User?.lName}")
                                                        </label>
                                                        <div>
                                                            <p class="mb-0"><strong>Completed:</strong> @evaluator.completedEval</p>
                                                            <p class="mb-0"><strong>Pending:</strong> @evaluator.pendingEval</p>
                                                            <p class="mb-0"><strong>Declined:</strong> @evaluator.declinedAssignment</p>

                                                            <p class="mb-0"><strong>Expertise:</strong></p>
                                                            <ul>
                                                                @foreach (var expertise in evaluator.EthicsEvaluatorExpertise)
                                                                {
                                                                    <li>@expertise.Expertise?.expertiseName</li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p>No recommended evaluators available.</p>
                                    }

                                    <h6>All Available Evaluators</h6>
                                    @if (Model.AvailableEvaluators != null && Model.AvailableEvaluators.Any())
                                    {
                                        <div class="row">
                                            @foreach (var evaluator in Model.AvailableEvaluators
                                           .Where(e => !Model.RecommendedEvaluators.Select(r => r.ethicsEvaluatorId).Contains(e.ethicsEvaluatorId)))
                                            {
                                                <div class="col-md-4 mb-3">
                                                    <div class="form-check">
                                                        <input class="form-check-input evaluator-checkbox" type="checkbox"
                                                               name="selectedEvaluatorIds"
                                                               value="@evaluator.ethicsEvaluatorId"
                                                               data-name="@($"{evaluator.Faculty?.User?.fName} {evaluator.Faculty?.User?.lName}")" />
                                                        <label class="form-check-label">
                                                            @($"{evaluator.Faculty?.User?.fName} {evaluator.Faculty?.User?.lName}")
                                                        </label>
                                                        <div>
                                                            <p class="mb-0"><strong>Completed:</strong> @evaluator.completedEval</p>
                                                            <p class="mb-0"><strong>Pending:</strong> @evaluator.pendingEval</p>
                                                            <p class="mb-0"><strong>Declined:</strong> @evaluator.declinedAssignment</p>

                                                            <p class="mb-0"><strong>Expertise:</strong></p>
                                                            <ul>
                                                                @foreach (var expertise in evaluator.EthicsEvaluatorExpertise)
                                                                {
                                                                    <li>@expertise.Expertise?.expertiseName</li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p>No evaluators available.</p>
                                    }
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <!-- Remove the submit button from here -->
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        const reviewType = document.getElementById('reviewType').value;
        const evaluatorCheckboxes = document.querySelectorAll('.evaluator-checkbox');
        const selectedEvaluatorsList = document.getElementById('selectedEvaluatorsList');
        const submitButton = document.getElementById('submitButton');
        const warningMessage = document.getElementById('warningMessage');

        evaluatorCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                updateSelectedEvaluators();
                checkSubmitButtonState();
            });
        });

        function updateSelectedEvaluators() {
            selectedEvaluatorsList.innerHTML = ''; // Clear the list

            evaluatorCheckboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    const name = checkbox.getAttribute('data-name');
                    const listItem = document.createElement('li');
                    listItem.textContent = name;

                    // Create a Remove button
                    const removeButton = document.createElement('button');
                    removeButton.textContent = 'Remove';
                    removeButton.classList.add('btn', 'btn-danger', 'btn-sm', 'ms-2'); // Add Bootstrap classes for styling
                    removeButton.onclick = function () {
                        checkbox.checked = false; // Uncheck the checkbox
                        updateSelectedEvaluators(); // Update the selected list
                        checkSubmitButtonState(); // Check the button state again
                    };

                    // Append the Remove button to the list item
                    listItem.appendChild(removeButton);
                    selectedEvaluatorsList.appendChild(listItem);
                }
            });
        }

        function checkSubmitButtonState() {
            const selectedCount = Array.from(evaluatorCheckboxes).filter(checkbox => checkbox.checked).length;

            // Clear previous warning message
            warningMessage.classList.add('d-none'); // Hide warning message by default
            submitButton.disabled = true; // Disable the submit button initially

            // Enable submit button based on review type
            if (reviewType === 'Expedited') {
                if (selectedCount >= 2 && selectedCount <= 3) {
                    submitButton.disabled = false; // Enable button for 2-3 evaluators
                }
            } else if (reviewType === 'Full Review') {
                if (selectedCount === 3) {
                    submitButton.disabled = false; // Enable button for exactly 3 evaluators
                }
            }

            // Show warning if maximum is reached
            if ((reviewType === 'Expedited' && selectedCount >= 3) || (reviewType === 'Full Review' && selectedCount >= 3)) {
                evaluatorCheckboxes.forEach(checkbox => {
                    if (!checkbox.checked) {
                        checkbox.disabled = true; // Disable unchecked checkboxes
                    }
                });
                showWarning(`You have reached the maximum of 3 evaluator assignments.`);
            } else {
                // Enable all checkboxes if under the limit
                evaluatorCheckboxes.forEach(checkbox => {
                    checkbox.disabled = false;
                });
            }
        }

        function showWarning(message) {
            warningMessage.textContent = message; // Set warning message text
            warningMessage.classList.remove('d-none'); // Show warning message
        }

        // Functions for copying text (if needed)
        function copyUrecNo() {
            const urecNo = document.getElementById("urecNoValue").innerText;
            navigator.clipboard.writeText(urecNo);
        }

        function copyDtsNo() {
            const dtsNo = document.getElementById("dtsNoValue").innerText;
            navigator.clipboard.writeText(dtsNo);
        }
    </script>
}